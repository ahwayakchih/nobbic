#!/bin/bash

export action=$1

export __VERSION=0.5.0
export __LABEL=nobbic

export __DIRNAME=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
export __APP="${__DIRNAME}/nobbic"
export __SRC="${__DIRNAME}/src"
export __TOOLS="${__DIRNAME}/tools"
export __TEMPLATES="${__DIRNAME}/src/templates"

source ${__SRC}/common.sh

export PODMAN_ARG_LABEL="--label ${__LABEL}=${__VERSION}"

if [[ "${PODMAN_CREATE_ARGS}" =~ (^|[[:space:]])--label[\ ]+($__LABEL=([^\s]*))([[:space:]]|$) ]] ; then
	export PODMAN_CREATE_ARGS=${PODMAN_CREATE_ARGS/${BASH_REMATCH[3]}/${__VERSION}}
fi

#
# @param {string} scriptPath
#
function inline () {
	local __INLINED=$1

	if [ -z "$__INLINED" ] ; then
		echo "WARNING: No script path was specified to inline, ignoring" >&2
		return 0
	fi

	if test $(basename "$__INLINED") = "$__INLINED" ; then
		__INLINED="${__SRC}/${__INLINED}"
	fi

	source $__INLINED
	return $?
}

#
# @param {string} appName
#
function sanitizeAppName () {
	local appName=$1

	if [ -z "$appName" ] ; then
		echo "WARNING: No application name was specified, using 'nodebb' as default" >&2
		appName="nodebb"
	fi

	echo "${appName}" | tr "[:blank:]" "_"
}

function showHelp () {
	local action=$1;
	local src="${__DIRNAME}/docs/Usage.markdown"
	if [ -n "$action" ] ; then
		src="${__DIRNAME}/docs/actions/$(basename $action).markdown"
	fi

	if [ ! -f "$src" ] ; then
		echo "ERROR: no documentation available" >&2
		return 1
	fi

	local prefix=""
	if ! command nobbic --help &>/dev/null ; then
		prefix="${__DIRNAME}/"
		if [ "$(pwd)" = "$__DIRNAME" ] ; then
			prefix="./"
		fi
	fi

	echo 'Usage:'
	local cols=$(tput cols)
	local rev=$(tput rev)
	local bold=$(tput bold)
	local reset=$(tput sgr0)
	local s
	grep -v -E '[[:space:]]*\[Read more\]\([^)]*\)\.*$' "$src"\
		| tail -n +3\
		| sed -E 's/^[\#]+[[:space:]]*//g'\
		| sed 's/```txt$/'$rev'/'\
		| sed 's/```sh$/'$bold'/'\
		| sed 's/```$/'$reset'/'\
		| sed 's/^\*/nobbic/'\
		| sed -E 's/`([^`]*)`/'$bold'\1'$reset'/g'\
		| sed -E 's/\[([^]]+)\]\([^)]*\)/\1/g'\
		| sed -E 's/(^|[[:space:]])nobbic($|[[:space:]])/\1'${prefix//\//\\\/}'nobbic\2/'\
		| while IFS= read -r line ; do\
			s="${line//($rev|$bold|$reset)/}";\
			[ "$line" != "$rev" -a "$line" != "$bold" -a "$line" != "$reset" ]\
				&& ([[ $((cols-${#s})) -gt 0 ]] && printf "%s%*s\n" "$line" $((cols-${#s})) || printf "%s\n" "$line" )\
				|| printf "$line";\
			done
}

#
# @param {string} APP_NAME is the same as pod's name
# @param {string} fromName   full script path or repo/image name
# @param {string} toolPath   path to default script to use, if image is not a script path
#
addToPod() {
	local APP_NAME=$1
	local fromName=$2
	local toolPath=$3

	case "$fromName" in
		1) inline "$toolPath" || return $?;;
		./*|/*) if [ -f "$fromName" ] ; then inline "$fromName" || return $?; else echo "'$fromName' script not found">&2; fi ;;
		*) local FROM_IMAGE=$fromName; inline "$toolPath" || return $?;;
	esac
}

#
# @param {string} APP_NAME is the same as pod's name
#
function infoPod () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	inline podman-info.sh || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
#
function buildPod () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	local APP_CREATE_ENV_FILE=$(mktemp -p ./)
	env APP_NAME="$APP_NAME" | grep -E "^(NODE(BB)?|CONTAINER|APP|PODMAN)_" > "$APP_CREATE_ENV_FILE"
	trap "rm '${APP_CREATE_ENV_FILE}'" EXIT

	if [ -z "$APP_ADD_MONGODB" ] && [ -z "$APP_ADD_REDIS" ] && [ -z "$APP_ADD_POSTGRES" ] ; then
		echo "WARNING: building without database container" >&2
		echo "         Set APP_ADD_MONGODB, APP_ADD_REDIS and/or APP_ADD_POSTGRES in environment" >&2
		# echo "         or specify database access info when running the pod" >&2
	fi

	echo "Building '${APP_NAME}' pod..."

	export PODMAN_CREATE_ARGS_NODEBB="${PODMAN_CREATE_ARGS_NODEBB}"

	local podOptions=""

	# TODO: this is hackish. Once podman-add-* scripts only prepare variables, we can leave 
	#       creating pod and its port setup for later, and do not need to check cases here.
	#       ideally ports would be prepared by podman-add-nodebb, overwritten by podman-add-nginx,
	#       then pod would be created and then containers. Maybe even scripts could be defined
	#       to be run "before" or "after" nodebb script.
	local port=${APP_USE_PORT:-8080}
	local nodebbPort=4567
	if [ -n "$APP_USE_CLUSTER" ] && [ "$APP_USE_CLUSTER" -gt 1 ] ; then
		local nodebbEnvPort=""
		for ((n=0;n<$APP_USE_CLUSTER;n++)); do
			podOptions="$podOptions -p $port:$nodebbPort"
			if [ -z "$nodebbEnvPort" ] ; then
				nodebbEnvPort="$nodebbPort"
			else
				nodebbEnvPort="${nodebbEnvPort},${nodebbPort}"
			fi
			port=$(($port + 1))
			nodebbPort=$(($nodebbPort + 1))
		done
		export CONTAINER_ENV_NODEBB_PORT=${CONTAINER_ENV_NODEBB_PORT:-${nodebbEnvPort}}
	else
		podOptions="$podOptions -p $port:$nodebbPort"
		export CONTAINER_ENV_NODEBB_PORT=${CONTAINER_ENV_NODEBB_PORT:-$nodebbPort}
	fi
	export CONTAINER_ENV_NODEBB_APP_USE_PORT=${CONTAINER_ENV_NODEBB_APP_USE_PORT:-${APP_USE_PORT:-8080}}

	if [ -n "$APP_ADD_NGINX" ] ; then
		# TODO: once "add-*" scripts only modify variables/state and actual `podman create`
		#       commands are run at the end, these hardcoded values won't be needed here anyway.
		port=${APP_USE_PORT:-8080}
		export CONTAINER_NGINX_PORT=${CONTAINER_NGINX_PORT:-80}
		podOptions="-p ${port}:${CONTAINER_NGINX_PORT}"
	fi

	podman pod create -n "$APP_NAME" $podOptions \
		$PODMAN_ARG_LABEL \
		--network=slirp4netns:port_handler=slirp4netns\
		--add-host=localhost:127.0.0.1 --hostname="$APP_NAME" || return $?

	if [ -n "$APP_ADD_MONGODB" ] ; then
		addToPod "$APP_NAME" "$APP_ADD_MONGODB" podman-add-mongodb.sh || return $?
	fi

	if [ -n "$APP_ADD_POSTGRES" ] ; then
		addToPod "$APP_NAME" "$APP_ADD_POSTGRES" podman-add-postgres.sh || return $?
	fi

	if [ -n "$APP_ADD_REDIS" ] ; then
		addToPod "$APP_NAME" "$APP_ADD_REDIS" podman-add-redis.sh || return $?
	fi

	if [ -n "$APP_ADD_NPM" ] ; then
		addToPod "$APP_NAME" "$APP_ADD_NPM" podman-add-npm.sh || return $?
	fi

	if [ -n "$APP_ADD_NGINX" ] ; then
		addToPod "$APP_NAME" "$APP_ADD_NGINX" podman-add-nginx.sh || return $?
	fi

	addToPod "$APP_NAME" "${APP_ADD_NODEBB:-1}" podman-add-nodebb.sh || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
#
function startPod () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	local existed=$(podman pod exists "$APP_NAME" && echo "exists");
	if [ -z "$existed" ] ; then
		if [ "${NOBBIC_START_AUTOBUILD:-yes}" = "yes" ] ; then
			buildPod "$APP_NAME" || return $?
		else
			echo "ERROR: no pod exists for ${APP_NAME}" >&2
			echo "       try to build it first" >&2
			return 1
		fi
	fi

	if test "$existed" ; then
		echo "Restarting '$APP_NAME' pod..."
		podman pod start "$APP_NAME" || return $?
		# Use `restart` right after `start` because of ports not being accessible from outside after stop+start.
		# See: https://github.com/containers/podman/issues/7103 - issue is closed, but on Arch with podman v2.2.1
		# and cgroups v1 problem seems to still exist. With cgroups v2 it works ok.
		# podman pod restart "$APP_NAME" || return 1
		(
			WAIT_FOR_PORT=$(podman container inspect "${APP_NAME}-nodebb" --format=$'{{range .Config.Env}}{{.}}\n{{end}}' | grep -E '^PORT=' | cut -d= -f2 | cut -d, -f1)
			echo "Waiting for ${APP_NAME} port ${WAIT_FOR_PORT} to be ready inside container"
			podman exec "${APP_NAME}-nodebb" /app/.container/tools/wait-for.sh 127.0.0.1:${WAIT_FOR_PORT} -t 120 -l || exit 1
			sleep 1
			WAIT_FOR_PORT=$(podman container inspect "${APP_NAME}-nodebb" --format=$'{{range .Config.Env}}{{.}}\n{{end}}' | grep -E '^APP_USE_PORT=' | cut -d= -f2)
			echo "Waiting for $APP_NAME port ${WAIT_FOR_PORT} to be accessible from outside of container"
			${__DIRNAME}/.container/tools/wait-for.sh localhost:${WAIT_FOR_PORT} -t 20 -l && echo "NodeBB should be accessible now" && exit 0
			echo "WARNING: Looks like podman on this system is buggy and needs restart, not just start. Restarting..."
			podman pod restart "$APP_NAME"
			# TODO: reattach to nodebb stdout?
		)&
	else
		echo "Starting '${APP_NAME}' pod..."
		podman pod start "$APP_NAME" || return $?
	fi

	podman attach --no-stdin --sig-proxy=false "${APP_NAME}-nodebb" || return 0
}

#
# @param {string} APP_NAME is the same as pod's name
#
function enterBash () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	if ! podman pod exists "$APP_NAME" ; then
		echo "ERROR: could not find pod '${APP_NAME}'" >&2
		return 1
	fi

	podman exec -it ${APP_NAME}-nodebb /bin/bash || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
# @param {string} command
# @param {string} arg...
#
function runCommand () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	if ! podman pod exists "$APP_NAME" ; then
		echo "ERROR: could not find pod '${APP_NAME}'" >&2
		return 1
	fi

	podman exec ${APP_NAME}-nodebb /bin/bash -c "source .container/lib/onbb_utils.sh; $(shift 1; echo $@)" || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
# @param {string} backupsDir
# @param {string} backupName
#
function backupPod () {
	local APP_NAME=$1
	local BACKUPS_DIR=${2:-$BACKUPS_DIR}
	local BACKUP_NAME=${3:-$BACKUP_NAME}

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	inline podman-backup.sh || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
# @param {string} backupsDir
# @param {string} backupName
#
function restorePod () {
	local APP_NAME=$1
	local BACKUPS_DIR=${2:-$BACKUPS_DIR}
	local BACKUP_NAME=${3:-$BACKUP_NAME}

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	inline podman-restore.sh || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
#
function upgradePod () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	inline podman-upgrade.sh || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
#
function installPod () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	inline host-install-service.sh || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
#
function stopPod () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	local isRunning=$(podman ps --filter status=running --filter name='^'$APP_NAME'-nodebb$' -q)
	if [ ! -z "$isRunning" ] ; then
		# Try to prevent possible errors, by stopping NodeBB first
		echo -n "Stopping NodeBB of '${APP_NAME}' pod... "
		(podman stop -t 10 ${APP_NAME}-nodebb >/dev/null && echo "OK") || echo "Failed"
	fi

	echo "Stopping '${APP_NAME}' pod..."
	podman pod stop -t 10 "$APP_NAME" || return $?
}

#
# @param {string} APP_NAME is the same as pod's name
#
function removePod () {
	local APP_NAME=$1

	if [ -z "$APP_NAME" ] ; then
		echo "ERROR: missing pod name" >&2
		return 1
	fi

	stopPod $APP_NAME || return 1

	echo "Removing '${APP_NAME}' pod..."
	podman pod rm "$APP_NAME" || return $?

	echo "Pod '${APP_NAME}' removed."
	echo ""
	echo "If you installed '${APP_NAME} as a service in host system, be sure to remove it!"
	echo ""

	echo "Removing pod's volumes..."
	podman volume ls --format='{{.Name}}' | grep -E "^${APP_NAME}-" | xargs -r podman volume rm || return $?
	echo "Volumes of pod '${APP_NAME}' removed."
}

#
# @param {string} imageType
#
function cleanupImages () {
	local imageType=$1

	if [ -z "$imageType" ] ; then
		echo "ERROR: missing which images to remove" >&2
		return 1
	fi

	# Remove all pods first
	for pod in $(podman pod ls --filter label="$__LABEL" --format '{{.Name}}') ; do
		removePod "$pod"
	done

	if [ "$imageType" = "repo" ] ; then
		if podman volume ls | grep 'nodebb-repo' >/dev/null ; then
			echo "Removing 'nodebb-repo' volume..."
			podman volume rm nodebb-repo && echo "'nodebb-repo' volume removed"
		else
			echo "Volume 'nodebb-repo' was already removed"
		fi

		if podman volume ls | grep 'nodebb-npm' >/dev/null ; then
			echo "Removing 'nodebb-npm' volume..."
			podman volume rm nodebb-npm && echo "'nodebb-npm' volume removed"
		fi
		return 0
	fi

	local removedImages=false

	if [ "$imageType" = "nodebb" ] ; then
		# Select only nodebb images, not nodebb-node
		local removedImages=false
		for image in $(podman images --format "{{.Repository}}:{{.Tag}}" | grep localhost/nodebb | grep -v localhost/nodebb- || echo "") ; do
			echo "Removing '$image' image..."
			podman rmi -f "$image" && echo "'$image' image removed"
			removedImages=true
		done
		test $removedImages || echo "NodeBB images were already removed"
		return 0
	fi

	# Both `nodebb` and `node` remove NodeBB images
	for image in $(podman images --format "{{.Repository}}:{{.Tag}}" | grep localhost/nodebb || echo "") ; do
		echo "Removing '$image' image..."
		podman rmi -f "$image" && echo "'$image' image removed"
		removedImages=true
	done
	test $removedImages || echo "Node and NodeBB images were already removed"
	return 0
}

function selfTest () {
	local filter=${2:-}
	if [ -n "$filter" ] ; then
		filter="/${filter}"
	fi

	for t in $(find ./test${filter} -type f 2>/dev/null || echo '') ; do
		echo "Testing ${t}"
		(inline $t | sed -E 's/.* works (ok|too)$/✔ &/;s/.* failed$/✗ &/') || return $?
		echo ""
	done
}


if [ -z "$action" ] || [ "$action" = "help" ] ; then
	showHelp $2
	exit 0
fi

case "$action" in
	list)
		shift 1
		podman pod ps --filter label="$__LABEL" $@
		exit 0
	;;
	build)
		buildPod $(sanitizeAppName $2) || exit $?
		exit 0
	;;
	info)
		infoPod $(sanitizeAppName $2) || exit $?
		exit 0
	;;
	start)
		startPod $(sanitizeAppName $2) || exit $?
		exit 0
	;;
	bash)
		enterBash $(sanitizeAppName $2) || exit $?
		exit 0
	;;
	exec)
		runCommand $(sanitizeAppName $2) $(shift 2; echo $@) || exit $?
		exit 0
	;;
	backup)
		backupPod $(sanitizeAppName $2) "$3" "$4" || exit $?
		exit 0
	;;
	upgrade)
		upgradePod $(sanitizeAppName $2) || exit $?
		exit 0
	;;
	restore)
		restorePod $(sanitizeAppName $2) "$3" "$4" || exit $?
		exit 0
	;;
	install)
		installPod $(sanitizeAppName $2) || exit $?
		exit 0
	;;
	stop)
		stopPod $(sanitizeAppName $2) || exit $?
		exit 0
	;;
	remove)
		removePod $(sanitizeAppName $2) || exit $?
		exit 0
	;;
	cleanup)
		cleanupImages $2 || exit $?
		exit 0
	;;
	self-test)
		selfTest "$@" || exit $?
		exit 0
	;;
	*)
		echo "ERROR: unrecognized action '$action', try 'help' action instead" >&2
		exit 1
	;;
esac

echo "ERROR: this should never happen" >&2
exit 1